# Guarantees that each available direction is chosen randomly without altering throughput when there's fewer than 4 available directions
Def Permutate(A, B, C, D)
  ChooseRandom {
    { A B C D }
    { B C D A }
    { C D A B }
    { D A B C }
  }
End

Def GrabInputFromBelt(Material, Then) 
    Write0("_INPUT")
    # Look for a loaded belt that's directed towards this machine
    ForEachInputBelt(Filter And { Is0("_INPUT") FurnitureType Material } {
        Write1("_INPUT")
        RemoveFurniture Material
    })
    Filter Is1("_INPUT") Chain { Then }
End

Def LoadOutputOntoBelt(Material, Then) 
    Write0("_OUTPUT")
    # Look for an empty belt that's directed away from this machine
    ForEachOutputBelt(Filter Is0("_OUTPUT") {
        Write1("_OUTPUT")
        PlaceFurniture Material
    })
    Filter Is1("_OUTPUT") Chain { Then }
End


"MACHINE_BASE" 
{
  name = "Base Machine"
  canBuildOutsideOfTerritory = true
  strength = 100
  viewId = { "machine" }
}

# "technofac_machine_simple" inherit "MACHINE_BASE"
# {
#     tickType = Effect Chain {
#         if(Not NoPower()) {
#             GrabInputFromBelt(
#                 
#             )
#         }
#         endif()
#     }
# }

"snta_metal_drill" inherit "MACHINE_BASE"
{
  name = "Drill"
  viewId = { "snta_drill" }
  blockMovement = true
  lightEmission = 5.0
  tickType = Effect Chain {
    if(Not NoPower()) {
        Chance 0.5 Chain {
          LoadOutputOntoBelt("technofac_slag_iron", DrainPower(0x1()))
          EmitGas "BLACK_SMOKE" 1
        }
    }
    endif()
  }
}